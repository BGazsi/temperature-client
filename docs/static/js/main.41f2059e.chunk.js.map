{"version":3,"sources":["hooks/useRequest.js","components/LeftNav/index.js","components/Card/index.js","pages/CurrentTemp/index.js","components/Graph/graphOptions.js","components/Graph/Graph.js","utils/rarefyData.js","hooks/useChartData.js","utils/createSubset.js","utils/getYAxisLimits.js","components/Graph/LastDayGraphs.js","components/Graph/Last30MinGraphs.js","pages/Statistics/index.js","pages/Landing/index.js","App.js","reportWebVitals.js","index.js"],"names":["useRequest","initUrl","useState","data","setData","loading","setLoading","error","setError","useEffect","ignore","fetch","then","res","json","temperatureData","catch","err","LeftNav","className","to","activeClassName","Card","children","cardInARow","defaultProps","CurrentTemp","isLoading","Loading","active","withOverlay","current","Grid","Row","Date","timestamp","toLocaleDateString","toLocaleTimeString","temp","humidity","baseGraphOptions","title","axes","bottom","mapsTo","scaleType","left","includeZero","curve","height","legend","enabled","tempGraphOptions","JSON","parse","stringify","getFillColor","getStrokeColor","domain","humidityGraphOptions","Graph","options","avg","arr","reduce","acc","val","length","useChartData","map","point","value","group","date","toISOString","findClosestPointToTime","currentTimestamp","currentIndex","createSubset","subsetTimeframeInMinute","startTime","safeStartTime","startIndex","endIndex","slice","getYAxisLimits","maxTempValue","Math","max","e","minTempValue","min","maxHumidityValue","LastDayGraph","rarefiedData","datapointFrequencyInMinute","Array","i","ceil","elementsToGetAverageFrom","currentElem","toFixed","push","averageData","tempData","humidityData","minHumidityValue","mergedTempOptions","mergedHumidityOptions","Last30MinGraphs","dataForLastHour","Statistics","LastDayGraphs","Landing","App","basename","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAiCeA,EA/BI,SAAAC,GAAY,IAAD,EACJC,mBAAS,MADL,mBACrBC,EADqB,KACfC,EADe,OAEEF,oBAAS,GAFX,mBAErBG,EAFqB,KAEZC,EAFY,OAGFJ,mBAAS,MAHP,mBAGrBK,EAHqB,KAGdC,EAHc,KA4B5B,OAvBAC,qBAAU,WACR,IAAIC,GAAS,EAiBb,OAfEJ,GAAW,GACXK,MAAMV,GACHW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACCH,IACHN,EAAQS,EAAIE,iBACZT,GAAW,OAGdU,OAAM,SAAAC,GACLT,EAASS,GACTX,GAAW,MAIV,WACLI,GAAS,KAEV,CAACT,IAEG,CAAEE,OAAME,UAASE,UCDXW,G,YAzBC,kBACd,uBAAOC,UAAU,WAAjB,SACE,+BACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CACEC,GAAG,WACHC,gBAAgB,SAChBF,UAAU,sBAHZ,mCAQF,oBAAIA,UAAU,iBAAd,SACE,cAAC,IAAD,CACEC,GAAG,cACHC,gBAAgB,SAChBF,UAAU,sBAHZ,iC,wBCbFG,G,MAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,WAAb,OACX,qBAAKL,UAAS,qBAAgBK,GAA9B,SAA6CD,MAQ/CD,EAAKG,aAAe,CAClBF,SAAU,GACVC,WAAY,GAGCF,QCZTI,G,MAAc,SAAC,GAAgC,IAA9BvB,EAA6B,EAA7BA,KAAMI,EAAuB,EAAvBA,MAC3B,GADkD,EAAhBoB,YACfxB,IAASI,EAC1B,OAAO,cAACqB,EAAA,EAAD,CAASC,QAAM,EAACC,aAAW,IAGpC,GAAIvB,EACF,MAAM,UAAN,OAAiBA,GAGnB,IAAMwB,EAAU5B,EAAK,GAErB,OACE,qBAAKgB,UAAU,aAAf,SACE,eAACa,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,wBAAOd,UAAU,YAAjB,iCACuB,IADvB,UAEM,IAAIe,MAAMH,EAAQI,WAAWC,qBAFnC,aAE4D,IAAIF,MAC3DH,EAAQI,WACTE,2BAGN,eAACJ,EAAA,EAAD,WACE,eAAC,EAAD,WACE,qDACA,oBAAGd,UAAU,WAAb,UAAyBY,EAAQO,KAAjC,eAEF,eAAC,EAAD,WACE,kDACA,oBAAGnB,UAAU,WAAb,UAAyBY,EAAQQ,SAAjC,oBAoBZb,EAAYD,aAAe,CACzBtB,KAAM,KACNI,MAAO,KACPoB,WAAW,GAGED,Q,gBC7DTc,EAAmB,CACvBC,MAAO,UACPC,KAAM,CACJC,OAAQ,CACNF,MAAO,OACPG,OAAQ,OACRC,UAAW,QAEbC,KAAM,CACJF,OAAQ,QACRC,UAAW,SACXE,aAAa,IAGjBC,MAAO,eACPC,OAAQ,QACRC,OAAQ,CACNC,SAAS,IAIPC,EAAgB,2BACjBC,KAAKC,MAAMD,KAAKE,UAAUf,KADT,IAEpBgB,aAAc,iBAAM,WACpBC,eAAgB,iBAAM,aAExBL,EAAiBV,KAAKI,KAAKY,OAAS,CAAC,GAAI,IAEzC,IAAMC,EAAoB,2BACrBN,KAAKC,MAAMD,KAAKE,UAAUf,KADL,IAExBgB,aAAc,iBAAM,WACpBC,eAAgB,iBAAM,aAExBE,EAAqBjB,KAAKI,KAAKY,OAAS,CAAC,GAAI,IC5B7C,IAAME,EAAQ,SAAC,GAAD,IAAGzD,EAAH,EAAGA,KAAM0D,EAAT,EAASA,QAAT,OACZ,cAAC,YAAD,CAAW1D,KAAMA,EAAM0D,QAASA,KAclCD,EAAMnC,aAAe,CACnBtB,KAAM,GACN0D,QAAST,GAGIQ,QCzBTE,EAAM,SAAAC,GAAG,OAAO,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAKC,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,IAAK,KAArC,OAA0CH,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAKI,SAAU,GCe7DC,EAfM,SAAAjE,GAYnB,MAAO,CAXUA,EAAKkE,KAAI,SAAAC,GAAK,MAAK,CAClCC,OAAQD,EAAMhC,KACdkC,MAAO,cACPC,KAAM,IAAIvC,MAAMoC,EAAMnC,WAAWuC,kBAEdvE,EAAKkE,KAAI,SAAAC,GAAK,MAAK,CACtCC,OAAQD,EAAM/B,SACdiC,MAAO,WACPC,KAAM,IAAIvC,MAAMoC,EAAMnC,WAAWuC,oBCT/BC,G,MAAyB,SAACxE,EAAMgC,GACpC,IAAKhC,GAAwB,IAAhBA,EAAKgE,OAChB,OAAOhE,EAET,GAAIgC,GAAahC,EAAK,GAAGgC,YAAcA,EACrC,MAAO,CAAChC,EAAK,GAAI,GAEnB,GAAIgC,GAAahC,EAAKA,EAAKgE,OAAS,GAAGhC,UACrC,MAAO,CAAChC,EAAKA,EAAKgE,OAAS,GAAIhE,EAAKgE,OAAS,GAI/C,IAFA,IAAIS,GAAoBzE,EAAK,GAAGgC,UAC5B0C,EAAe,EACZD,EAAmBzC,GAExByC,GAAoBzE,EADpB0E,GAAgB,GACuB1C,UAEzC,MAAO,CAAChC,EAAK0E,GAAeA,KAmBfC,EAhBM,SAAC3E,EAAM4E,EAAyBC,GACnD,IAAK7E,GAAwB,IAAhBA,EAAKgE,OAChB,OAAOhE,EAET,IAAM8E,EAAgBD,IAAc7E,EAAK,GAAGgC,UAJqB,EAMrCwC,EAAuBxE,EAAM6E,GANQ,mBAMnDE,GANmD,aAQzCP,EACtBxE,EACA8E,EAA0C,IAA1BF,GAV+C,mBAQrDI,GARqD,WAajE,OAAOhF,EAAKiF,MAAMF,EAAYC,EAAW,I,QCvB5BE,EATQ,SAAAlF,GACrB,IAAMmF,EAAeC,KAAKC,IAAL,MAAAD,KAAI,YAAQpF,EAAKkE,KAAI,SAAAoB,GAAC,OAAIA,EAAEnD,UAAS,IACpDoD,EAAeH,KAAKI,IAAL,MAAAJ,KAAI,YAAQpF,EAAKkE,KAAI,SAAAoB,GAAC,OAAIA,EAAEnD,UAAS,IACpDsD,EAAmBL,KAAKC,IAAL,MAAAD,KAAI,YAAQpF,EAAKkE,KAAI,SAAAoB,GAAC,OAAIA,EAAElD,cAAa,GAGlE,MAAO,CAACmD,EAAcJ,EAFGC,KAAKI,IAAL,MAAAJ,KAAI,YAAQpF,EAAKkE,KAAI,SAAAoB,GAAC,OAAIA,EAAElD,cAAa,GAEZqD,ICqDzCC,EAhDM,SAAC,GAAc,IAAZ1F,EAAW,EAAXA,KAChB2F,EJUmB,SAAC3F,GAAgD,IAA1C4F,EAAyC,uDAAZ,KAC7D,IAAK5F,KAAUA,aAAgB6F,OAC7B,OAAO7F,EAGT,IADA,IAAM2F,EAAe,GAEfG,EAAI,EACRA,EAAIV,KAAKW,KAAK/F,EAAKgE,OAAS4B,GAE5BE,IACA,CACA,IAAME,EAA2BhG,EAAKiF,MACpCa,EAAIF,EACJE,EAAIF,EAA6BA,GAE7BK,EAAc,CAClB9D,KAAMwB,EAAIqC,EAAyB9B,KAAI,SAAAoB,GAAC,OAAKA,EAAEnD,SAAO+D,QAAQ,GAC9D9D,SAAUuB,EAAIqC,EAAyB9B,KAAI,SAAAoB,GAAC,OAAKA,EAAElD,aAAW8D,QAAQ,GACtElE,UAAW2B,EAAIqC,EAAyB9B,KAAI,SAAAoB,GAAC,OAAKA,EAAEtD,cAAYkE,WAE9DD,GACFN,EAAaQ,KAAKF,GAItB,OAAON,EInCcS,CAAYzB,EAAa3E,EAAM,MAAU,IAD7B,EAEAiE,EAAa0B,GAFb,mBAE1BU,EAF0B,KAEhBC,EAFgB,OAQ7BpB,EAAeS,GARc,mBAI/BJ,EAJ+B,KAK/BJ,EAL+B,KAM/BoB,EAN+B,KAO/Bd,EAP+B,KAU3Be,EAAoBtD,KAAKC,MAAMD,KAAKE,UAAUH,IACpDuD,EAAkBjE,KAAKI,KAAKY,OAAS,EAAEgC,GAAeJ,GACtD,IAAMsB,EAAwBvD,KAAKC,MACjCD,KAAKE,UAAUI,IAOjB,OALAiD,EAAsBlE,KAAKI,KAAKY,OAAS,EACtCgD,GACAd,GAID,sBAAKzE,UAAU,yBAAf,UACE,cAAC,EAAD,CAAMK,WAAY,EAAlB,SACE,cAAC,EAAD,CACErB,KAAMqG,EACN3C,QAAO,2BAAO8C,GAAP,IAA0BlE,MAAO,8BAG5C,cAAC,EAAD,CAAMjB,WAAY,EAAlB,SACE,cAAC,EAAD,CACErB,KAAMsG,EACN5C,QAAO,2BAAO+C,GAAP,IAA8BnE,MAAO,8BCevCoE,EA/CS,SAAC,GAAc,IAAZ1G,EAAW,EAAXA,KACnB2G,EAAkBhC,EAAa3E,EAAM,IADP,EAEHiE,EAAa0C,GAFV,mBAE7BN,EAF6B,KAEnBC,EAFmB,OAQhCpB,EAAeyB,GARiB,mBAIlCpB,EAJkC,KAKlCJ,EALkC,KAMlCoB,EANkC,KAOlCd,EAPkC,KAS9Be,EAAoBtD,KAAKC,MAAMD,KAAKE,UAAUH,IACpDuD,EAAkBjE,KAAKI,KAAKY,OAAS,EAAEgC,GAAeJ,GACtD,IAAMsB,EAAwBvD,KAAKC,MACjCD,KAAKE,UAAUI,IAOjB,OALAiD,EAAsBlE,KAAKI,KAAKY,OAAS,EACtCgD,GACAd,GAID,sBAAKzE,UAAU,0BAAf,UACE,cAAC,EAAD,CAAMK,WAAY,EAAlB,SACE,cAAC,EAAD,CACErB,KAAMqG,EACN3C,QAAO,2BAAO8C,GAAP,IAA0BlE,MAAO,iCAG5C,cAAC,EAAD,CAAMjB,WAAY,EAAlB,SACE,cAAC,EAAD,CACErB,KAAMsG,EACN5C,QAAO,2BAAO+C,GAAP,IAA8BnE,MAAO,iCCnChDsE,EAAa,SAAC,GAAc,IAAZ5G,EAAW,EAAXA,KACpB,OAAKA,GAASA,EAAKgE,OAKjB,iCACE,cAAC6C,EAAD,CAAe7G,KAAMA,IACrB,cAAC,EAAD,CAAiBA,KAAMA,OANlB,2DAqBX4G,EAAWtF,aAAe,CACxBtB,KAAM,MAGO4G,QC3BAE,EAFC,kBAAM,cAAC,IAAD,CAAU7F,GAAG,cC+BpB8F,EAxBH,WAAO,IAAD,EACiBlH,EAC/B,sCADMG,EADQ,EACRA,KAAME,EADE,EACFA,QAASE,EADP,EACOA,MAGvB,OACE,eAAC,IAAD,CAAQ4G,SAAS,sBAAjB,UACE,cAAC,EAAD,IACA,qBAAKhG,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiG,KAAK,cAAZ,SACE,cAAC,EAAD,CAAYjH,KAAMA,MAEpB,cAAC,IAAD,CAAOiH,KAAK,WAAZ,SACE,cAAC,EAAD,CAAajH,KAAMA,EAAMI,MAAOA,EAAOoB,UAAWtB,MAEpD,cAAC,IAAD,CAAO+G,KAAK,IAAZ,SACE,cAAC,EAAD,eCdGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3G,MAAK,YAAkD,IAA/C4G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.41f2059e.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useRequest = initUrl => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let ignore = false;\n    const fetchTemps = () => {\n      setLoading(true);\n      fetch(initUrl)\n        .then(res => res.json())\n        .then(res => {\n          if (!ignore) {\n            setData(res.temperatureData);\n            setLoading(false);\n          }\n        })\n        .catch(err => {\n          setError(err);\n          setLoading(false);\n        });\n    };\n    fetchTemps();\n    return () => {\n      ignore = true;\n    };\n  }, [initUrl]);\n\n  return { data, loading, error };\n};\n\nexport default useRequest;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './style.scss';\n\nconst LeftNav = () => (\n  <aside className=\"left-nav\">\n    <ul>\n      <li className=\"left-nav__item \">\n        <NavLink\n          to=\"/current\"\n          activeClassName=\"active\"\n          className=\"left-nav-item__link\"\n        >\n          Current temperature\n        </NavLink>\n      </li>\n      <li className=\"left-nav__item\">\n        <NavLink\n          to=\"/statistics\"\n          activeClassName=\"active\"\n          className=\"left-nav-item__link\"\n        >\n          Statistics\n        </NavLink>\n      </li>\n    </ul>\n  </aside>\n);\n\nexport default LeftNav;\n","import React from 'react';\nimport './style.scss';\nimport * as PropTypes from 'prop-types';\n\nconst Card = ({ children, cardInARow }) => (\n  <div className={`card card--${cardInARow}`}>{children}</div>\n);\n\nCard.propTypes = {\n  children: PropTypes.node,\n  cardInARow: PropTypes.oneOf([1, 2, 3, 4, 6, 12]),\n};\n\nCard.defaultProps = {\n  children: '',\n  cardInARow: 4,\n};\n\nexport default Card;\n","import React from 'react';\nimport { Grid, Loading, Row } from 'carbon-components-react';\nimport PropTypes from 'prop-types';\nimport Card from '../../components/Card';\nimport './style.scss';\n\nconst CurrentTemp = ({ data, error, isLoading }) => {\n  if (isLoading || (!data && !error)) {\n    return <Loading active withOverlay />;\n  }\n\n  if (error) {\n    return `error: ${error}`;\n  }\n\n  const current = data[0];\n\n  return (\n    <div className=\"page-inner\">\n      <Grid>\n        <Row>\n          <small className=\"timestamp\">\n            Last measurement at:{' '}\n            {`${new Date(+current.timestamp).toLocaleDateString()}, ${new Date(\n              +current.timestamp,\n            ).toLocaleTimeString()}`}\n          </small>\n        </Row>\n        <Row>\n          <Card>\n            <h2>Current temperature</h2>\n            <p className=\"centered\">{current.temp} °C</p>\n          </Card>\n          <Card>\n            <h2>Current humidity</h2>\n            <p className=\"centered\">{current.humidity}%</p>\n          </Card>\n        </Row>\n      </Grid>\n    </div>\n  );\n};\n\nCurrentTemp.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.string,\n      humidity: PropTypes.string,\n      timestamp: PropTypes.string,\n    }),\n  ),\n  error: PropTypes.instanceOf(Object),\n  isLoading: PropTypes.bool,\n};\n\nCurrentTemp.defaultProps = {\n  data: null,\n  error: null,\n  isLoading: false,\n};\n\nexport default CurrentTemp;\n","const baseGraphOptions = {\n  title: 'History',\n  axes: {\n    bottom: {\n      title: 'Time',\n      mapsTo: 'date',\n      scaleType: 'time',\n    },\n    left: {\n      mapsTo: 'value',\n      scaleType: 'linear',\n      includeZero: false,\n    },\n  },\n  curve: 'curveNatural',\n  height: '20rem',\n  legend: {\n    enabled: false,\n  },\n};\n\nconst tempGraphOptions = {\n  ...JSON.parse(JSON.stringify(baseGraphOptions)),\n  getFillColor: () => '#005d5d',\n  getStrokeColor: () => '#003939',\n};\ntempGraphOptions.axes.left.domain = [20, 30];\n\nconst humidityGraphOptions = {\n  ...JSON.parse(JSON.stringify(baseGraphOptions)),\n  getFillColor: () => '#1192e8',\n  getStrokeColor: () => '#0f7dc7',\n};\nhumidityGraphOptions.axes.left.domain = [20, 40];\n\nexport { baseGraphOptions, tempGraphOptions, humidityGraphOptions };\n","import React from 'react';\nimport { LineChart } from '@carbon/charts-react';\nimport { PropTypes } from 'prop-types';\nimport { tempGraphOptions } from './graphOptions';\n\nconst Graph = ({ data, options }) => (\n  <LineChart data={data} options={options} />\n);\n\nGraph.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.string,\n      humidity: PropTypes.string,\n      timestamp: PropTypes.string,\n    }),\n  ),\n  options: PropTypes.shape({}),\n};\n\nGraph.defaultProps = {\n  data: [],\n  options: tempGraphOptions,\n};\n\nexport default Graph;\n","const avg = arr => arr?.reduce((acc, val) => acc + val, 0) / arr?.length || 0;\n\nexport const rarefyData = (data, datapointFrequencyInMinute = 24 * 60) => {\n  if (!data || !(data instanceof Array)) {\n    return data;\n  }\n  const rarefiedData = [];\n  for (\n    let i = 0;\n    i < Math.ceil(data.length / datapointFrequencyInMinute);\n    // eslint-disable-next-line no-plusplus\n    i++\n  ) {\n    const currentElem = data[i * datapointFrequencyInMinute];\n    if (currentElem) {\n      rarefiedData.push(currentElem);\n    }\n  }\n\n  return rarefiedData;\n};\n\nexport const averageData = (data, datapointFrequencyInMinute = 24 * 60) => {\n  if (!data || !(data instanceof Array)) {\n    return data;\n  }\n  const rarefiedData = [];\n  for (\n    let i = 0;\n    i < Math.ceil(data.length / datapointFrequencyInMinute);\n    // eslint-disable-next-line no-plusplus\n    i++\n  ) {\n    const elementsToGetAverageFrom = data.slice(\n      i * datapointFrequencyInMinute,\n      i * datapointFrequencyInMinute + datapointFrequencyInMinute,\n    );\n    const currentElem = {\n      temp: avg(elementsToGetAverageFrom.map(e => +e.temp)).toFixed(1),\n      humidity: avg(elementsToGetAverageFrom.map(e => +e.humidity)).toFixed(1),\n      timestamp: avg(elementsToGetAverageFrom.map(e => +e.timestamp)).toFixed(),\n    };\n    if (currentElem) {\n      rarefiedData.push(currentElem);\n    }\n  }\n\n  return rarefiedData;\n};\n","const useChartData = data => {\n  const tempData = data.map(point => ({\n    value: +point.temp,\n    group: 'Temperature',\n    date: new Date(+point.timestamp).toISOString(),\n  }));\n  const humidityData = data.map(point => ({\n    value: +point.humidity,\n    group: 'Humidity',\n    date: new Date(+point.timestamp).toISOString(),\n  }));\n\n  return [tempData, humidityData];\n};\n\nexport default useChartData;\n","const findClosestPointToTime = (data, timestamp) => {\n  if (!data || data.length === 0) {\n    return data;\n  }\n  if (timestamp > +data[0].timestamp || !timestamp) {\n    return [data[0], 0];\n  }\n  if (timestamp < +data[data.length - 1].timestamp) {\n    return [data[data.length - 1], data.length - 1];\n  }\n  let currentTimestamp = +data[0].timestamp;\n  let currentIndex = 0;\n  while (currentTimestamp > timestamp) {\n    currentIndex += 1;\n    currentTimestamp = +data[currentIndex].timestamp;\n  }\n  return [data[currentIndex], currentIndex];\n};\n\nconst createSubset = (data, subsetTimeframeInMinute, startTime) => {\n  if (!data || data.length === 0) {\n    return data;\n  }\n  const safeStartTime = startTime || +data[0].timestamp;\n  // eslint-disable-next-line no-unused-vars\n  const [start, startIndex] = findClosestPointToTime(data, startTime);\n  // eslint-disable-next-line no-unused-vars\n  const [end, endIndex] = findClosestPointToTime(\n    data,\n    safeStartTime - subsetTimeframeInMinute * 60000,\n  );\n\n  return data.slice(startIndex, endIndex + 1);\n};\n\nexport default createSubset;\n","const getYAxisLimits = data => {\n  const maxTempValue = Math.max(...data.map(e => e.temp)) + 0.25;\n  const minTempValue = Math.min(...data.map(e => e.temp)) - 0.25;\n  const maxHumidityValue = Math.max(...data.map(e => e.humidity)) + 0.5;\n  const minHumidityValue = Math.min(...data.map(e => e.humidity)) - 0.5;\n\n  return [minTempValue, maxTempValue, minHumidityValue, maxHumidityValue];\n};\n\nexport default getYAxisLimits;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Graph from './Graph';\nimport { averageData } from '../../utils/rarefyData';\nimport { humidityGraphOptions, tempGraphOptions } from './graphOptions';\nimport useChartData from '../../hooks/useChartData';\nimport './style.scss';\nimport createSubset from '../../utils/createSubset';\nimport Card from '../Card';\nimport getYAxisLimits from '../../utils/getYAxisLimits';\n\nconst LastDayGraph = ({ data }) => {\n  const rarefiedData = averageData(createSubset(data, 60 * 24), 60);\n  const [tempData, humidityData] = useChartData(rarefiedData);\n  const [\n    minTempValue,\n    maxTempValue,\n    minHumidityValue,\n    maxHumidityValue,\n  ] = getYAxisLimits(rarefiedData);\n\n  const mergedTempOptions = JSON.parse(JSON.stringify(tempGraphOptions));\n  mergedTempOptions.axes.left.domain = [+minTempValue, +maxTempValue];\n  const mergedHumidityOptions = JSON.parse(\n    JSON.stringify(humidityGraphOptions),\n  );\n  mergedHumidityOptions.axes.left.domain = [\n    +minHumidityValue,\n    +maxHumidityValue,\n  ];\n\n  return (\n    <div className=\"last-day-graphs graphs\">\n      <Card cardInARow={2}>\n        <Graph\n          data={tempData}\n          options={{ ...mergedTempOptions, title: 'Last day temperatures' }}\n        />\n      </Card>\n      <Card cardInARow={2}>\n        <Graph\n          data={humidityData}\n          options={{ ...mergedHumidityOptions, title: 'Last day humidity' }}\n        />\n      </Card>\n    </div>\n  );\n};\n\nLastDayGraph.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.string,\n      humidity: PropTypes.string,\n      timestamp: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default LastDayGraph;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Graph from './Graph';\nimport createSubset from '../../utils/createSubset';\nimport { humidityGraphOptions, tempGraphOptions } from './graphOptions';\nimport useChartData from '../../hooks/useChartData';\nimport './style.scss';\nimport Card from '../Card';\nimport getYAxisLimits from '../../utils/getYAxisLimits';\n\nconst Last30MinGraphs = ({ data }) => {\n  const dataForLastHour = createSubset(data, 30);\n  const [tempData, humidityData] = useChartData(dataForLastHour);\n  const [\n    minTempValue,\n    maxTempValue,\n    minHumidityValue,\n    maxHumidityValue,\n  ] = getYAxisLimits(dataForLastHour);\n  const mergedTempOptions = JSON.parse(JSON.stringify(tempGraphOptions));\n  mergedTempOptions.axes.left.domain = [+minTempValue, +maxTempValue];\n  const mergedHumidityOptions = JSON.parse(\n    JSON.stringify(humidityGraphOptions),\n  );\n  mergedHumidityOptions.axes.left.domain = [\n    +minHumidityValue,\n    +maxHumidityValue,\n  ];\n\n  return (\n    <div className=\"last-hour-graphs graphs\">\n      <Card cardInARow={2}>\n        <Graph\n          data={tempData}\n          options={{ ...mergedTempOptions, title: 'Last 30 min temperatures' }}\n        />\n      </Card>\n      <Card cardInARow={2}>\n        <Graph\n          data={humidityData}\n          options={{ ...mergedHumidityOptions, title: 'Last 30 min humidity' }}\n        />\n      </Card>\n    </div>\n  );\n};\n\nLast30MinGraphs.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.string,\n      humidity: PropTypes.string,\n      timestamp: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default Last30MinGraphs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LastDayGraphs from '../../components/Graph/LastDayGraphs';\nimport Last30MinGraphs from '../../components/Graph/Last30MinGraphs';\n\nconst Statistics = ({ data }) => {\n  if (!data || !data.length) {\n    return <div>todo: chart placeholder</div>;\n  }\n\n  return (\n    <main>\n      <LastDayGraphs data={data} />\n      <Last30MinGraphs data={data} />\n    </main>\n  );\n};\n\nStatistics.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.string,\n      humidity: PropTypes.string,\n      timestamp: PropTypes.string,\n    }),\n  ),\n};\n\nStatistics.defaultProps = {\n  data: null,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst Landing = () => <Redirect to=\"/current\" />;\n\nexport default Landing;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport useRequest from './hooks/useRequest';\n\nimport './App.scss';\nimport LeftNav from './components/LeftNav';\nimport CurrentTemp from './pages/CurrentTemp';\nimport Statistics from './pages/Statistics';\nimport Landing from './pages/Landing';\n\nconst App = () => {\n  const { data, loading, error } = useRequest(\n    'http://localhost:3000/api/getTemps',\n  );\n  return (\n    <Router basename=\"/temperature-client\">\n      <LeftNav />\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/statistics\">\n            <Statistics data={data} />\n          </Route>\n          <Route path=\"/current\">\n            <CurrentTemp data={data} error={error} isLoading={loading} />\n          </Route>\n          <Route path=\"/\">\n            <Landing />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}