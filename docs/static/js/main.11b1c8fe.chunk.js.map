{"version":3,"sources":["hooks/useRequest.js","components/LeftNav/index.js","components/Card/index.js","pages/CurrentTemp/index.js","components/Graph/graphOptions.js","components/Graph/Graph.js","utils/rarefyData.js","hooks/useChartData.js","utils/createSubset.js","components/Graph/LastDayGraphs.js","components/Graph/LastHourGraphs.js","pages/Statistics/index.js","App.js","reportWebVitals.js","index.js"],"names":["useRequest","initUrl","useState","data","setData","loading","setLoading","error","setError","useEffect","ignore","fetch","then","res","json","temperatureData","catch","err","LeftNav","className","to","Card","children","cardInARow","defaultProps","CurrentTemp","isLoading","Loading","active","withOverlay","current","Grid","Row","Date","timestamp","toLocaleDateString","toLocaleTimeString","temp","humidity","baseGraphOptions","title","axes","bottom","mapsTo","scaleType","left","includeZero","curve","height","legend","enabled","tempGraphOptions","JSON","parse","stringify","getFillColor","getStrokeColor","domain","humidityGraphOptions","Graph","options","avg","arr","reduce","acc","val","length","useChartData","map","point","value","group","date","toISOString","findClosestPointToTime","currentTimestamp","currentIndex","createSubset","subsetTimeframeInMinute","startTime","safeStartTime","startIndex","endIndex","slice","LastDayGraph","rarefiedData","datapointFrequencyInMinute","Array","i","Math","ceil","elementsToGetAverageFrom","currentElem","e","toFixed","push","averageData","tempData","humidityData","console","log","LastHourGraph","dataForLastHour","Statistics","LastDayGraphs","LastHourGraphs","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11b1c8fe.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useRequest = initUrl => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let ignore = false;\n    const fetchTemps = () => {\n      setLoading(true);\n      fetch(initUrl)\n        .then(res => res.json())\n        .then(res => {\n          if (!ignore) {\n            setData(res.temperatureData);\n            setLoading(false);\n          }\n        })\n        .catch(err => {\n          setError(err);\n          setLoading(false);\n        });\n    };\n    fetchTemps();\n    return () => {\n      ignore = true;\n    };\n  }, [initUrl]);\n\n  return { data, loading, error };\n};\n\nexport default useRequest;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './style.scss';\n\nconst LeftNav = () => (\n  <aside className=\"left-nav\">\n    <ul>\n      <li className=\"left-nav__item\">\n        <Link to=\"/\">Current temperature</Link>\n      </li>\n      <li className=\"left-nav__item\">\n        <Link to=\"/statistics\">Statistics</Link>\n      </li>\n    </ul>\n  </aside>\n);\n\nexport default LeftNav;\n","import React from 'react';\nimport './style.scss';\nimport * as PropTypes from 'prop-types';\n\nconst Card = ({ children, cardInARow }) => (\n  <div className={`card card--${cardInARow}`}>{children}</div>\n);\n\nCard.propTypes = {\n  children: PropTypes.node,\n  cardInARow: PropTypes.oneOf([1, 2, 3, 4, 6, 12]),\n};\n\nCard.defaultProps = {\n  children: '',\n  cardInARow: 4,\n};\n\nexport default Card;\n","import React from 'react';\nimport { Grid, Loading, Row } from 'carbon-components-react';\nimport PropTypes from 'prop-types';\nimport Card from '../../components/Card';\nimport './style.scss';\n\nconst CurrentTemp = ({ data, error, isLoading }) => {\n  if (isLoading || (!data && !error)) {\n    return <Loading active withOverlay />;\n  }\n\n  if (error) {\n    return `error: ${error}`;\n  }\n\n  const current = data[0];\n\n  return (\n    <div className=\"page-inner\">\n      <Grid>\n        <Row>\n          <small className=\"timestamp\">\n            Last measurement at:{' '}\n            {`${new Date(+current.timestamp).toLocaleDateString()}, ${new Date(\n              +current.timestamp,\n            ).toLocaleTimeString()}`}\n          </small>\n        </Row>\n        <Row>\n          <Card>\n            <h2>Current temperature</h2>\n            <p className=\"centered\">{current.temp} Â°C</p>\n          </Card>\n          <Card>\n            <h2>Current humidity</h2>\n            <p className=\"centered\">{current.humidity}%</p>\n          </Card>\n        </Row>\n      </Grid>\n    </div>\n  );\n};\n\nCurrentTemp.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.string,\n      humidity: PropTypes.string,\n      timestamp: PropTypes.string,\n    }),\n  ),\n  error: PropTypes.instanceOf(Object),\n  isLoading: PropTypes.bool,\n};\n\nCurrentTemp.defaultProps = {\n  data: null,\n  error: null,\n  isLoading: false,\n};\n\nexport default CurrentTemp;\n","const baseGraphOptions = {\n  title: 'History',\n  axes: {\n    bottom: {\n      title: 'Time',\n      mapsTo: 'date',\n      scaleType: 'time',\n    },\n    left: {\n      mapsTo: 'value',\n      scaleType: 'linear',\n      includeZero: false,\n    },\n  },\n  curve: 'curveNatural',\n  height: '20rem',\n  legend: {\n    enabled: false,\n  },\n};\n\nconst tempGraphOptions = {\n  ...JSON.parse(JSON.stringify(baseGraphOptions)),\n  getFillColor: () => '#005d5d',\n  getStrokeColor: () => '#003939',\n};\ntempGraphOptions.axes.left.domain = [10, 30];\n\nconst humidityGraphOptions = {\n  ...JSON.parse(JSON.stringify(baseGraphOptions)),\n  getFillColor: () => '#1192e8',\n  getStrokeColor: () => '#0f7dc7',\n};\nhumidityGraphOptions.axes.left.domain = [0, 100];\n\nexport { baseGraphOptions, tempGraphOptions, humidityGraphOptions };\n","import React from 'react';\nimport { AreaChart } from '@carbon/charts-react';\nimport { PropTypes } from 'prop-types';\nimport { tempGraphOptions } from './graphOptions';\n\nconst Graph = ({ data, options }) => (\n  <AreaChart data={data} options={options} />\n);\n\nGraph.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.string,\n      humidity: PropTypes.string,\n      timestamp: PropTypes.string,\n    }),\n  ),\n  options: PropTypes.shape({}),\n};\n\nGraph.defaultProps = {\n  data: [],\n  options: tempGraphOptions,\n};\n\nexport default Graph;\n","const avg = arr => arr?.reduce((acc, val) => acc + val, 0) / arr?.length || 0;\n\nexport const rarefyData = (data, datapointFrequencyInMinute = 24 * 60) => {\n  if (!data || !(data instanceof Array)) {\n    return data;\n  }\n  const rarefiedData = [];\n  for (\n    let i = 0;\n    i < Math.ceil(data.length / datapointFrequencyInMinute);\n    // eslint-disable-next-line no-plusplus\n    i++\n  ) {\n    const currentElem = data[i * datapointFrequencyInMinute];\n    if (currentElem) {\n      rarefiedData.push(currentElem);\n    }\n  }\n\n  return rarefiedData;\n};\n\nexport const averageData = (data, datapointFrequencyInMinute = 24 * 60) => {\n  if (!data || !(data instanceof Array)) {\n    return data;\n  }\n  const rarefiedData = [];\n  for (\n    let i = 0;\n    i < Math.ceil(data.length / datapointFrequencyInMinute);\n    // eslint-disable-next-line no-plusplus\n    i++\n  ) {\n    const elementsToGetAverageFrom = data.slice(\n      i * datapointFrequencyInMinute,\n      i * datapointFrequencyInMinute + datapointFrequencyInMinute,\n    );\n    const currentElem = {\n      temp: avg(elementsToGetAverageFrom.map(e => +e.temp)).toFixed(1),\n      humidity: avg(elementsToGetAverageFrom.map(e => +e.humidity)).toFixed(1),\n      timestamp: avg(elementsToGetAverageFrom.map(e => +e.timestamp)).toFixed(),\n    };\n    if (currentElem) {\n      rarefiedData.push(currentElem);\n    }\n  }\n\n  return rarefiedData;\n};\n","const useChartData = data => {\n  const tempData = data.map(point => ({\n    value: +point.temp,\n    group: 'Temperature',\n    date: new Date(+point.timestamp).toISOString(),\n  }));\n  const humidityData = data.map(point => ({\n    value: +point.humidity,\n    group: 'Humidity',\n    date: new Date(+point.timestamp).toISOString(),\n  }));\n\n  return [tempData, humidityData];\n};\n\nexport default useChartData;\n","const findClosestPointToTime = (data, timestamp) => {\n  if (!data || data.length === 0) {\n    return data;\n  }\n  if (timestamp > +data[0].timestamp || !timestamp) {\n    return [data[0], 0];\n  }\n  if (timestamp < +data[data.length - 1].timestamp) {\n    return [data[data.length - 1], data.length - 1];\n  }\n  let currentTimestamp = +data[0].timestamp;\n  let currentIndex = 0;\n  while (currentTimestamp > timestamp) {\n    currentIndex += 1;\n    currentTimestamp = +data[currentIndex].timestamp;\n  }\n  return [data[currentIndex], currentIndex];\n};\n\nconst createSubset = (data, subsetTimeframeInMinute, startTime) => {\n  if (!data || data.length === 0) {\n    return data;\n  }\n  const safeStartTime = startTime || +data[0].timestamp;\n  // eslint-disable-next-line no-unused-vars\n  const [start, startIndex] = findClosestPointToTime(data, startTime);\n  // eslint-disable-next-line no-unused-vars\n  const [end, endIndex] = findClosestPointToTime(\n    data,\n    safeStartTime - subsetTimeframeInMinute * 60000,\n  );\n\n  return data.slice(startIndex, endIndex + 1);\n};\n\nexport default createSubset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Graph from './Graph';\nimport { averageData } from '../../utils/rarefyData';\nimport { humidityGraphOptions, tempGraphOptions } from './graphOptions';\nimport useChartData from '../../hooks/useChartData';\nimport './style.scss';\nimport createSubset from '../../utils/createSubset';\nimport Card from '../Card';\n\nconst LastDayGraph = ({ data }) => {\n  const rarefiedData = averageData(createSubset(data, 60 * 24), 60);\n  const [tempData, humidityData] = useChartData(rarefiedData);\n  // eslint-disable-next-line no-console\n  console.log({ ...tempGraphOptions, title: 'Last day temperatures' });\n\n  return (\n    <div className=\"last-day-graphs graphs\">\n      <Card cardInARow={2}>\n        <Graph\n          data={tempData}\n          options={{ ...tempGraphOptions, title: 'Last day temperatures' }}\n        />\n      </Card>\n      <Card cardInARow={2}>\n        <Graph\n          data={humidityData}\n          options={{ ...humidityGraphOptions, title: 'Last day humidity' }}\n        />\n      </Card>\n    </div>\n  );\n};\n\nLastDayGraph.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.string,\n      humidity: PropTypes.string,\n      timestamp: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default LastDayGraph;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Graph from './Graph';\nimport createSubset from '../../utils/createSubset';\nimport { humidityGraphOptions, tempGraphOptions } from './graphOptions';\nimport useChartData from '../../hooks/useChartData';\nimport './style.scss';\nimport Card from '../Card';\n\nconst LastHourGraph = ({ data }) => {\n  const dataForLastHour = createSubset(data, 60);\n  const [tempData, humidityData] = useChartData(dataForLastHour);\n\n  return (\n    <div className=\"last-hour-graphs graphs\">\n      <Card cardInARow={2}>\n        <Graph\n          data={tempData}\n          options={{ ...tempGraphOptions, title: 'Last hour temperatures' }}\n        />\n      </Card>\n      <Card cardInARow={2}>\n        <Graph\n          data={humidityData}\n          options={{ ...humidityGraphOptions, title: 'Last hour humidity' }}\n        />\n      </Card>\n    </div>\n  );\n};\n\nLastHourGraph.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.string,\n      humidity: PropTypes.string,\n      timestamp: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default LastHourGraph;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '@carbon/charts/styles.css';\nimport LastDayGraphs from '../../components/Graph/LastDayGraphs';\nimport LastHourGraphs from '../../components/Graph/LastHourGraphs';\n\nconst Statistics = ({ data }) => {\n  if (!data || !data.length) {\n    return <div>todo: chart placeholder</div>;\n  }\n\n  return (\n    <main>\n      <LastDayGraphs data={data} />\n      <LastHourGraphs data={data} />\n    </main>\n  );\n};\n\nStatistics.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.string,\n      humidity: PropTypes.string,\n      timestamp: PropTypes.string,\n    }),\n  ),\n};\n\nStatistics.defaultProps = {\n  data: null,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport useRequest from './hooks/useRequest';\n\nimport './App.scss';\nimport LeftNav from './components/LeftNav';\nimport CurrentTemp from './pages/CurrentTemp';\nimport Statistics from './pages/Statistics';\n\nconst App = () => {\n  const { data, loading, error } = useRequest(\n    'http://localhost:3000/api/getTemps',\n  );\n  return (\n    <Router>\n      <LeftNav />\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/statistics\">\n            <Statistics data={data} />\n          </Route>\n          <Route path=\"/\">\n            <CurrentTemp data={data} error={error} isLoading={loading} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}