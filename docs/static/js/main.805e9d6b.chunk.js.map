{"version":3,"sources":["hooks/useRequest.js","components/LeftNav/index.js","components/Card/index.js","components/CurrentTemp/index.js","App.js","reportWebVitals.js","index.js"],"names":["useRequest","initUrl","useState","data","setData","loading","setLoading","error","setError","useEffect","ignore","fetch","then","res","json","temperatureData","catch","err","LeftNav","className","href","Card","children","defaultProps","CurrentTemp","isLoading","Loading","active","withOverlay","current","sort","a","b","timestamp","Grid","Row","Date","toLocaleDateString","toLocaleTimeString","temp","humidity","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAiCeA,EA/BI,SAAAC,GAAY,IAAD,EACJC,mBAAS,MADL,mBACrBC,EADqB,KACfC,EADe,OAEEF,oBAAS,GAFX,mBAErBG,EAFqB,KAEZC,EAFY,OAGFJ,mBAAS,MAHP,mBAGrBK,EAHqB,KAGdC,EAHc,KA4B5B,OAvBAC,qBAAU,WACR,IAAIC,GAAS,EAiBb,OAfEJ,GAAW,GACXK,MAAMV,GACHW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACCH,IACHN,EAAQS,EAAIE,iBACZT,GAAW,OAGdU,OAAM,SAAAC,GACLT,EAASS,GACTX,GAAW,MAIV,WACLI,GAAS,KAEV,CAACT,IAEG,CAAEE,OAAME,UAASE,UCdXW,G,YAbC,kBACd,uBAAOC,UAAU,WAAjB,SACE,+BACE,oBAAIA,UAAU,iBAAd,SACE,mBAAGC,KAAK,IAAR,mCAEF,oBAAID,UAAU,iBAAd,SACE,mBAAGC,KAAK,IAAR,iC,wBCNFC,G,MAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,qBAAKH,UAAU,OAAf,SAAuBG,MAMtDD,EAAKE,aAAe,CAClBD,SAAU,IAGGD,QCRTG,G,MAAc,SAAC,GAAgC,IAA9BrB,EAA6B,EAA7BA,KAAMI,EAAuB,EAAvBA,MAC3B,GADkD,EAAhBkB,YACftB,IAASI,EAC1B,OAAO,cAACmB,EAAA,EAAD,CAASC,QAAM,EAACC,aAAW,IAGpC,GAAIrB,EACF,MAAM,UAAN,OAAiBA,GAGnB,IAAMsB,EAAU1B,EAAK2B,MAAK,SAACC,EAAGC,GAAJ,QAAYD,EAAEE,UAAYD,EAAEC,cAAY,GAElE,OACE,qBAAKd,UAAU,aAAf,SACE,eAACe,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,wBAAOhB,UAAU,YAAjB,iCACuB,IADvB,UAEM,IAAIiB,MAAMP,EAAQI,WAAWI,qBAFnC,aAE4D,IAAID,MAC3DP,EAAQI,WACTK,2BAGN,eAACH,EAAA,EAAD,WACE,eAAC,EAAD,WACE,qDACA,oBAAGhB,UAAU,WAAb,UAAyBU,EAAQU,KAAjC,eAEF,eAAC,EAAD,WACE,kDACA,oBAAGpB,UAAU,WAAb,UAAyBU,EAAQW,SAAjC,oBAoBZhB,EAAYD,aAAe,CACzBpB,KAAM,KACNI,MAAO,KACPkB,WAAW,GAGED,QCxCAiB,EAdH,WAAO,IAAD,EACiBzC,EAC/B,4DADMG,EADQ,EACRA,KAAME,EADE,EACFA,QAASE,EADP,EACOA,MAGvB,OACE,qCACE,cAAC,EAAD,IACA,qBAAKY,UAAU,MAAf,SACE,cAAC,EAAD,CAAahB,KAAMA,EAAMI,MAAOA,EAAOkB,UAAWpB,UCH3CqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.805e9d6b.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useRequest = initUrl => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let ignore = false;\n    const fetchTemps = () => {\n      setLoading(true);\n      fetch(initUrl)\n        .then(res => res.json())\n        .then(res => {\n          if (!ignore) {\n            setData(res.temperatureData);\n            setLoading(false);\n          }\n        })\n        .catch(err => {\n          setError(err);\n          setLoading(false);\n        });\n    };\n    fetchTemps();\n    return () => {\n      ignore = true;\n    };\n  }, [initUrl]);\n\n  return { data, loading, error };\n};\n\nexport default useRequest;\n","import React from 'react';\nimport './style.scss';\n\nconst LeftNav = () => (\n  <aside className=\"left-nav\">\n    <ul>\n      <li className=\"left-nav__item\">\n        <a href=\"/\">Current temperature</a>\n      </li>\n      <li className=\"left-nav__item\">\n        <a href=\"/\">Statistics</a>\n      </li>\n    </ul>\n  </aside>\n);\n\nexport default LeftNav;\n","import React from 'react';\nimport './style.scss';\nimport * as PropTypes from 'prop-types';\n\nconst Card = ({ children }) => <div className=\"card\">{children}</div>;\n\nCard.propTypes = {\n  children: PropTypes.node,\n};\n\nCard.defaultProps = {\n  children: '',\n};\n\nexport default Card;\n","import React from 'react';\nimport { Grid, Loading, Row } from 'carbon-components-react';\nimport PropTypes from 'prop-types';\nimport Card from '../Card';\nimport './style.scss';\n\nconst CurrentTemp = ({ data, error, isLoading }) => {\n  if (isLoading || (!data && !error)) {\n    return <Loading active withOverlay />;\n  }\n\n  if (error) {\n    return `error: ${error}`;\n  }\n\n  const current = data.sort((a, b) => -(a.timestamp - b.timestamp))[0];\n\n  return (\n    <div className=\"page-inner\">\n      <Grid>\n        <Row>\n          <small className=\"timestamp\">\n            Last measurement at:{' '}\n            {`${new Date(+current.timestamp).toLocaleDateString()}, ${new Date(\n              +current.timestamp,\n            ).toLocaleTimeString()}`}\n          </small>\n        </Row>\n        <Row>\n          <Card>\n            <h2>Current temperature</h2>\n            <p className=\"centered\">{current.temp} Â°C</p>\n          </Card>\n          <Card>\n            <h2>Current humidity</h2>\n            <p className=\"centered\">{current.humidity}%</p>\n          </Card>\n        </Row>\n      </Grid>\n    </div>\n  );\n};\n\nCurrentTemp.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temp: PropTypes.string,\n      humidity: PropTypes.string,\n      timestamp: PropTypes.string,\n    }),\n  ),\n  error: PropTypes.instanceOf(Object),\n  isLoading: PropTypes.bool,\n};\n\nCurrentTemp.defaultProps = {\n  data: null,\n  error: null,\n  isLoading: false,\n};\n\nexport default CurrentTemp;\n","import React from 'react';\nimport useRequest from './hooks/useRequest';\n\nimport './App.scss';\nimport LeftNav from './components/LeftNav';\nimport CurrentTemp from './components/CurrentTemp';\n\nconst App = () => {\n  const { data, loading, error } = useRequest(\n    'https://bence-temperature-api.herokuapp.com/api/getTemps',\n  );\n  return (\n    <>\n      <LeftNav />\n      <div className=\"app\">\n        <CurrentTemp data={data} error={error} isLoading={loading} />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}